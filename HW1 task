1. Реализовать сервлет с отображением в таблице списка еды (в памяти и БЕЗ учета пользователя)
Деплоиться в Tomcat лучше как war exploded: нет упаковки в war и при нажатой кнопке
 Update Resources on Frame Deactivation можно обновляться css, html, jsp без передеплоя.
  При изменении web.xml, добавлении методов, классов необходим redeploy.

1.1 По аналогии с UserServlet добавить MealServlet и meals.jsp
Задеплоить приложение (war) в Tomcat c applicationContext=topjava (приложение должно быть доступно по
   http://localhost:8080/topjava)
Попробовать разные деплои в Tomcat, remote и local debug
1.2 Сделать отображения списка еды в JSP, цвет записи в таблице зависит от параметра excess (красный/зеленый).
1.2.1 Список еды захардкодить (те проинициализировать в коде, желательно чтобы в проекте инициализация была только
в одном месте)
1.2.2 Время выводить без 'T'
1.2.3 Список выводим БЕЗ фильтрации по startTime/endTime
1.2.4 С обработкой исключений пока можно не заморачиваться, мы будем красиво обрабатывать в конце стажировки
1.2.5 Вариант реализации:
из сервлета преобразуете еду в List<MealTo>;
кладете список в запрос (request.setAttribute);
делаете forward на jsp для отрисовки таблицы (при redirect атрибуты теряются).
в JSP для цикла можно использовать JSTL tag forEach. Для подключения JSTL в pom.xml и шапку JSP нужно добавить:
    <dependency>
       <groupId>javax.servlet</groupId>
       <artifactId>jstl</artifactId>
       <version>1.2</version>
    </dependency>

    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
    ...

Optional
2. Реализуем в ПАМЯТИ CRUD (create/read/update/delete) для еды
Пример: Simple CRUD using Servlet/JSP

Пример нужно САМОСТОЯТЕЛЬНО переделать: вместо хранения в MySql нужно хранить в ПАМЯТИ (задание упрощается).
Классы: сервлет, инрерфейс хранения, его реализация для хранения в памяти
2.1 Хранение в памяти будет одна из наших CRUD реализаций (позже будет JDBC, JPA и DATA-JPA).
2.2 Работать с реализацией CRUD через интерфейс, который не должен ничего знать о деталях реализации
(Map, DB или что-то еще).
2.3 Добавить поле id в Meal/ MealTo и реализовать генерацию счетчика, УЧЕСТЬ МНОГОПОТОЧНОСТЬ СЕРВЛЕТОВ
обзор java.util.concurrent
2.4 Сделать форму редактирования в JSP: AJAX/JavaScript использовать НЕ надо,
делаем через <form method="post"> и doPost() в сервлете.
2.5 Для ввода дат и времени можно использовать html5 типы, хотя они поддерживаются не всеми браузерами
(протестировать свой браузер). В конце курса мы добавим DateTimePicker jQuery plugin,
 который будет работать на всех браузерах.
2.6 Форму на create-update предлагаю не дублировать, сделать одну (хотя это не ошибка сделать разные).

После выполнения ДЗ обязательно проверьте решение на ошибки
question Вопросы по HW1
Не попадаю на страничку/брекпойнт в сервлете.

внимательно проверь url и applicationContext (Application Context должен быть тот же, что и url приложения: wiki IDEA)
посмотрите в task manager: возможно запущено несколько JVM и они мешают друг другу. Лишние java приложения убить.
Приложение не видит TOPJAVA_ROOT.

После выставления переменной окружения IDEA нужно рестартовать. Слеши в пути должны быть в стиле unix (/).
 Проверить, видит ли java переменную окружения можно так: System.getenv("TOPJAVA_ROOT").
 Еще вариант: добавить -DTOPJAVA_ROOT=... в опции запуска приложения,
 тогда она доступна из java как System.getProperty("TOPJAVA_ROOT").

Проблемы с кодировкой в POST (кракозябры).

Возможное решение - выставьте кодировку ДО первого чтения из request:

protected void doPost(HttpServletRequest request, ...) {
    request.setCharacterEncoding("UTF-8");
Если сервлет тыкают несколько пользователей / несколько браузеров, какого должно быть поведение?
Нужно ли что-то делать с сессиями?

В Optional нужно делать реализацию хранения многопоточной. Cессии пока не используем (начнутся, когда будет
 прикручивать авторизацию).

Для чего нам нужна многопоточная реализация коллекции, если каждый пользователь видит только себя?

Реализация хранения в памяти у нас одна на всех. Те коллекция шарится между пользователями, а они в разных потоках
 ее дергают. Если несколько потоков одновременно будут изменять коллекцию без учета многопоточности (например один
 будет удалять, второй вставлять), мы получим ConcurrentModificationException

Предпочтительнее ли создавать новый объект Meal при каждом update?

Если при обновлении не создавать копию, то сохраненный в памяти объект может кто-то попортить. Вопрос скорее доверия
 к коду- если проект большой и людей над ним трудится много, то вероятнее нужно копировать.

Почему теряются атрибуты при передаче на сервлет: http://localhost:8080/topjava/meals?action=add&... и
req.getAttribute("action") = null ?

См. Difference between getAttribute() and getParameter(). Отсюда также следует, что при редиректе атрибуты теряются.

Зачем нужен в jsp <jsp:useBean id=".." scope="request" type=".."/> ?

jsp:useBean нужен IDEA для автодополнений - она понимает тип переменной, которая уже доступна в JSP (например
через setAttribute). И еще эта переменная становится доступной в java вставках. Для вывода в JSP это тэг не обязателен.
 Если тип переменной JSP не совпадает с тем, что в jsp:useBean, будет ошибка.


 Типичные ошибки
 0 Обязательно и как можно чаще пользуйтесь Ctrl+Alt+L - отформатировать код класса
 1 Если в названии класса есть Meal, не нужно использовать слово meal в методах класса.
 2 Привыкайте писать комментарии к чекину: одной фразой что вы сделали в нем. Например: Meals CRUD implementation.
  См. Как писать сообщения коммитов
 3 Хранение в памяти и операции с ней должны выполняться просто и эффективно
 4 Хранить нужно Meal и конвертировать ее в MealTo когда отдаем список на отображение в JSP.
 Иначе при редактировании любой записи или изменении юзером своей нормы caloriesPerDay нужно будет пересчитывать все
  записи юзера.
 5 Стили color можно применять ко всей строке таблицы tr, а не каждой ячейке.
 6 DateTimeFormatter можно сделать один заранее (он потокобезопасный в отличие от SimpleDateFormatter),
 а не создавать новый при каждом запросе.
 7 Работать с CRUD надо через интерфейс.
 8 Реализаций хранения будет несколько, нужно учитывать это в названии класса имплементации работы в памяти.
 9 В web.xml принято группировать сервлет со своим маппингом
 10 Не размещайте никакую логику (форматирование, счетчики) в бинах, где хранятся только данные (Meal, MealTo)
 11 Еще раз: детали реализации в памяти не должны быть никому видны. Те НЕ НАДО счетчик размещать в Meal или MealServlet
  или MealsUtil, в базе же он будет по другому генерится.
 12 volatile при ++ не помогает от многопоточности. Почему?
 13 Обратите также внимание на то, чтобы реализация вашей коллекции для хранения еды была также многопоточной.
 14 Не делайте дублирование кода MealsUtil. Возможно вам пригодятся константы LocalTime.MIN и LocalTime.MAX
 15 Не дублируйте строки в jsp. Посмотрите на тернарный оператор.
 16 После операции delete в браузере должен быть url http:\\localhost:8080\topjava\meals
 17 Перед чекином проверяйте свой ченджлист (Ctrl+D на файле из Local Changes - посмотреть что поменялось). Если там
 только пробелы/переводы строк, не надо его комитить - делайте файлу Git->revert.
 18 Учтите в названии реализации CRUD, что
 18.1 у нас будет несколько реализаций (не только в памяти)
 18.2 у нас будет 2 CRUD (для еды и пользователей). А в реальном проекте их намного больше.
 19 Сессии НЕ использовать! При редиректе все атрибуты (req.getAttribute()) теряются (см. вопрос выше). Сценарий
  редиректа:
 1 из сервлета делаем редирект (снова на сервлет, не на JSP!)
 2 снова заходим в сервлет
 3 кладем нужные атрибуты и делаем forward на jsp
 4 если очень хочется передать параметры из 1. в 2. можно сделать их через параметры запроса (например meals?id=5)
  и доставать через reg.getParameter(id). В моей реализации такого не потребовалось.